class h extends Error{name="MeiliSearchError";constructor(...t){super(...t)}}class k extends h{name="MeiliSearchApiError";cause;response;constructor(t,e){super(e?.message??`${t.status}: ${t.statusText}`),this.response=t,e!==void 0&&(this.cause=e)}}class A extends h{name="MeiliSearchRequestError";constructor(t,e){super(`Request to ${t} has failed`,{cause:e})}}class D extends h{name="MeiliSearchTimeOutError";constructor(t){super(t)}}function q(a,t){return`${a}
Hint: It might not be working because maybe you're not up to date with the Meilisearch version that ${t} call requires.`}const S="0.49.0";function p(a){return Object.entries(a).reduce((t,e)=>{const[s,n]=e;return n!==void 0&&(t[s]=n),t},{})}async function P(a){return await new Promise(t=>setTimeout(t,a))}function E(a){return a.startsWith("https://")||a.startsWith("http://")?a:`http://${a}`}function F(a){return a.endsWith("/")||(a+="/"),a}function R(a){return Object.keys(a).reduce((s,n)=>{const i=a[n];return i===void 0?s:Array.isArray(i)?{...s,[n]:i.join(",")}:i instanceof Date?{...s,[n]:i.toISOString()}:{...s,[n]:i}},{})}function I(a){try{return a=E(a),a=F(a),a}catch{throw new h("The provided host is not valid.")}}function C(a){if(Array.isArray(a))return a.reduce((t,e)=>(t[e[0]]=e[1],t),{});if("has"in a){const t={};return a.forEach((e,s)=>t[s]=e),t}else return Object.assign({},a)}function U(a){const t="X-Meilisearch-Client",e=`Meilisearch JavaScript (v${S})`,s="Content-Type",n="Authorization",i=C(a.requestConfig?.headers??{});if(a.apiKey&&!i[n]&&(i[n]=`Bearer ${a.apiKey}`),i[s]||(i["Content-Type"]="application/json"),a.clientAgents&&Array.isArray(a.clientAgents)){const u=a.clientAgents.concat(e);i[t]=u.join(" ; ")}else{if(a.clientAgents&&!Array.isArray(a.clientAgents))throw new h(`Meilisearch: The header "${t}" should be an array of string(s).
`);i[t]=e}return i}class w{headers;url;requestConfig;httpClient;requestTimeout;constructor(t){this.headers=U(t),this.requestConfig=t.requestConfig,this.httpClient=t.httpClient,this.requestTimeout=t.timeout;try{const e=I(t.host);this.url=new URL(e)}catch{throw new h("The provided host is not valid.")}}async request({method:t,url:e,params:s,body:n,config:i={}}){const u=new URL(e,this.url);if(s){const l=new URLSearchParams;Object.keys(s).filter(g=>s[g]!==null).map(g=>l.set(g,s[g])),u.search=l.toString()}i.headers?.["Content-Type"]||(n=JSON.stringify(n));const d={...this.headers,...i.headers},c=await this.fetchWithTimeout(u.toString(),{...i,...this.requestConfig,method:t,body:n,headers:d},this.requestTimeout).catch(l=>{throw new A(u.toString(),l)});if(this.httpClient!==void 0)return c;const y=await c.text(),x=y===""?void 0:JSON.parse(y);if(!c.ok)throw new k(c,x);return x}async fetchWithTimeout(t,e,s){return new Promise((n,i)=>{const f=[(this.httpClient?this.httpClient:fetch)(t,e)];let c;if(s){const y=new Promise((x,l)=>{c=setTimeout(()=>{l(new Error("Error: Request Timed Out"))},s)});f.push(y)}Promise.race(f).then(n).catch(i).finally(()=>{clearTimeout(c)})})}async get(t,e,s){return await this.request({method:"GET",url:t,params:e,config:s})}async post(t,e,s,n){return await this.request({method:"POST",url:t,body:e,params:s,config:n})}async put(t,e,s,n){return await this.request({method:"PUT",url:t,body:e,params:s,config:n})}async patch(t,e,s,n){return await this.request({method:"PATCH",url:t,body:e,params:s,config:n})}async delete(t,e,s,n){return await this.request({method:"DELETE",url:t,body:e,params:s,config:n})}}class r{taskUid;indexUid;status;type;enqueuedAt;constructor(t){this.taskUid=t.taskUid,this.indexUid=t.indexUid,this.status=t.status,this.type=t.type,this.enqueuedAt=new Date(t.enqueuedAt)}}class m{indexUid;status;type;uid;batchUid;canceledBy;details;error;duration;startedAt;enqueuedAt;finishedAt;constructor(t){this.indexUid=t.indexUid,this.status=t.status,this.type=t.type,this.uid=t.uid,this.batchUid=t.batchUid,this.details=t.details,this.canceledBy=t.canceledBy,this.error=t.error,this.duration=t.duration,this.startedAt=new Date(t.startedAt),this.enqueuedAt=new Date(t.enqueuedAt),this.finishedAt=new Date(t.finishedAt)}}class b{httpRequest;constructor(t){this.httpRequest=new w(t)}async getTask(t){const e=`tasks/${t}`,s=await this.httpRequest.get(e);return new m(s)}async getTasks(t={}){const s=await this.httpRequest.get("tasks",R(t));return{...s,results:s.results.map(n=>new m(n))}}async waitForTask(t,{timeOutMs:e=5e3,intervalMs:s=50}={}){const n=Date.now();for(;Date.now()-n<e;){const i=await this.getTask(t);if(![T.TASK_ENQUEUED,T.TASK_PROCESSING].includes(i.status))return i;await P(s)}throw new D(`timeout of ${e}ms has exceeded on process ${t} when waiting a task to be resolved.`)}async waitForTasks(t,{timeOutMs:e=5e3,intervalMs:s=50}={}){const n=[];for(const i of t){const u=await this.waitForTask(i,{timeOutMs:e,intervalMs:s});n.push(u)}return n}async cancelTasks(t={}){const s=await this.httpRequest.post("tasks/cancel",{},R(t));return new r(s)}async deleteTasks(t={}){const s=await this.httpRequest.delete("tasks",{},R(t));return new r(s)}}class ${uid;details;stats;startedAt;finishedAt;duration;progress;constructor(t){this.uid=t.uid,this.details=t.details,this.stats=t.stats,this.startedAt=t.startedAt,this.finishedAt=t.finishedAt,this.duration=t.duration,this.progress=t.progress}}class K{httpRequest;constructor(t){this.httpRequest=new w(t)}async getBatch(t){const e=`batches/${t}`,s=await this.httpRequest.get(e);return new $(s)}async getBatches(t={}){const s=await this.httpRequest.get("batches",R(t));return{...s,results:s.results.map(n=>new $(n))}}}const T={TASK_PROCESSING:"processing",TASK_ENQUEUED:"enqueued"},O={INDEX_NOT_FOUND:"index_not_found"};class o{uid;primaryKey;createdAt;updatedAt;httpRequest;tasks;constructor(t,e,s){this.uid=e,this.primaryKey=s,this.httpRequest=new w(t),this.tasks=new b(t)}async search(t,e,s){const n=`indexes/${this.uid}/search`;return await this.httpRequest.post(n,p({q:t,...e}),void 0,s)}async searchGet(t,e,s){const n=`indexes/${this.uid}/search`,u={q:t,...e,filter:(d=>{if(typeof d=="string")return d;if(Array.isArray(d))throw new h("The filter query parameter should be in string format when using searchGet")})(e?.filter),sort:e?.sort?.join(","),facets:e?.facets?.join(","),attributesToRetrieve:e?.attributesToRetrieve?.join(","),attributesToCrop:e?.attributesToCrop?.join(","),attributesToHighlight:e?.attributesToHighlight?.join(","),vector:e?.vector?.join(","),attributesToSearchOn:e?.attributesToSearchOn?.join(",")};return await this.httpRequest.get(n,p(u),s)}async searchForFacetValues(t,e){const s=`indexes/${this.uid}/facet-search`;return await this.httpRequest.post(s,p(t),void 0,e)}async searchSimilarDocuments(t){const e=`indexes/${this.uid}/similar`;return await this.httpRequest.post(e,p(t),void 0)}async getRawInfo(){const t=`indexes/${this.uid}`,e=await this.httpRequest.get(t);return this.primaryKey=e.primaryKey,this.updatedAt=new Date(e.updatedAt),this.createdAt=new Date(e.createdAt),e}async fetchInfo(){return await this.getRawInfo(),this}async fetchPrimaryKey(){return this.primaryKey=(await this.getRawInfo()).primaryKey,this.primaryKey}static async create(t,e={},s){const u=await new w(s).post("indexes",{...e,uid:t});return new r(u)}async update(t){const e=`indexes/${this.uid}`,s=await this.httpRequest.patch(e,t);return s.enqueuedAt=new Date(s.enqueuedAt),s}async delete(){const t=`indexes/${this.uid}`,e=await this.httpRequest.delete(t);return new r(e)}async getTasks(t={}){return await this.tasks.getTasks({...t,indexUids:[this.uid]})}async getTask(t){return await this.tasks.getTask(t)}async waitForTasks(t,{timeOutMs:e=5e3,intervalMs:s=50}={}){return await this.tasks.waitForTasks(t,{timeOutMs:e,intervalMs:s})}async waitForTask(t,{timeOutMs:e=5e3,intervalMs:s=50}={}){return await this.tasks.waitForTask(t,{timeOutMs:e,intervalMs:s})}async getStats(){const t=`indexes/${this.uid}/stats`;return await this.httpRequest.get(t)}async getDocuments(t={}){if(t=p(t),t.filter!==void 0)try{const e=`indexes/${this.uid}/documents/fetch`;return await this.httpRequest.post(e,t)}catch(e){throw(e instanceof A||e instanceof k)&&(e.message=q(e.message,"getDocuments")),e}else{const e=`indexes/${this.uid}/documents`,s=Array.isArray(t?.fields)?{fields:t?.fields?.join(",")}:{};return await this.httpRequest.get(e,{...t,...s})}}async getDocument(t,e){const s=`indexes/${this.uid}/documents/${t}`,n=(()=>{if(Array.isArray(e?.fields))return e?.fields?.join(",")})();return await this.httpRequest.get(s,p({...e,fields:n}))}async addDocuments(t,e){const s=`indexes/${this.uid}/documents`,n=await this.httpRequest.post(s,t,e);return new r(n)}async addDocumentsFromString(t,e,s){const n=`indexes/${this.uid}/documents`,i=await this.httpRequest.post(n,t,s,{headers:{"Content-Type":e}});return new r(i)}async addDocumentsInBatches(t,e=1e3,s){const n=[];for(let i=0;i<t.length;i+=e)n.push(await this.addDocuments(t.slice(i,i+e),s));return n}async updateDocuments(t,e){const s=`indexes/${this.uid}/documents`,n=await this.httpRequest.put(s,t,e);return new r(n)}async updateDocumentsInBatches(t,e=1e3,s){const n=[];for(let i=0;i<t.length;i+=e)n.push(await this.updateDocuments(t.slice(i,i+e),s));return n}async updateDocumentsFromString(t,e,s){const n=`indexes/${this.uid}/documents`,i=await this.httpRequest.put(n,t,s,{headers:{"Content-Type":e}});return new r(i)}async deleteDocument(t){const e=`indexes/${this.uid}/documents/${t}`,s=await this.httpRequest.delete(e);return s.enqueuedAt=new Date(s.enqueuedAt),s}async deleteDocuments(t){const e=!Array.isArray(t)&&typeof t=="object",s=e?"documents/delete":"documents/delete-batch",n=`indexes/${this.uid}/${s}`;try{const i=await this.httpRequest.post(n,t);return new r(i)}catch(i){throw(i instanceof A&&e||i instanceof k)&&(i.message=q(i.message,"deleteDocuments")),i}}async deleteAllDocuments(){const t=`indexes/${this.uid}/documents`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async updateDocumentsByFunction(t){const e=`indexes/${this.uid}/documents/edit`,s=await this.httpRequest.post(e,t);return new r(s)}async getSettings(){const t=`indexes/${this.uid}/settings`;return await this.httpRequest.get(t)}async updateSettings(t){const e=`indexes/${this.uid}/settings`,s=await this.httpRequest.patch(e,t);return s.enqueued=new Date(s.enqueuedAt),s}async resetSettings(){const t=`indexes/${this.uid}/settings`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getPagination(){const t=`indexes/${this.uid}/settings/pagination`;return await this.httpRequest.get(t)}async updatePagination(t){const e=`indexes/${this.uid}/settings/pagination`,s=await this.httpRequest.patch(e,t);return new r(s)}async resetPagination(){const t=`indexes/${this.uid}/settings/pagination`,e=await this.httpRequest.delete(t);return new r(e)}async getSynonyms(){const t=`indexes/${this.uid}/settings/synonyms`;return await this.httpRequest.get(t)}async updateSynonyms(t){const e=`indexes/${this.uid}/settings/synonyms`,s=await this.httpRequest.put(e,t);return new r(s)}async resetSynonyms(){const t=`indexes/${this.uid}/settings/synonyms`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getStopWords(){const t=`indexes/${this.uid}/settings/stop-words`;return await this.httpRequest.get(t)}async updateStopWords(t){const e=`indexes/${this.uid}/settings/stop-words`,s=await this.httpRequest.put(e,t);return new r(s)}async resetStopWords(){const t=`indexes/${this.uid}/settings/stop-words`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getRankingRules(){const t=`indexes/${this.uid}/settings/ranking-rules`;return await this.httpRequest.get(t)}async updateRankingRules(t){const e=`indexes/${this.uid}/settings/ranking-rules`,s=await this.httpRequest.put(e,t);return new r(s)}async resetRankingRules(){const t=`indexes/${this.uid}/settings/ranking-rules`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getDistinctAttribute(){const t=`indexes/${this.uid}/settings/distinct-attribute`;return await this.httpRequest.get(t)}async updateDistinctAttribute(t){const e=`indexes/${this.uid}/settings/distinct-attribute`,s=await this.httpRequest.put(e,t);return new r(s)}async resetDistinctAttribute(){const t=`indexes/${this.uid}/settings/distinct-attribute`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getFilterableAttributes(){const t=`indexes/${this.uid}/settings/filterable-attributes`;return await this.httpRequest.get(t)}async updateFilterableAttributes(t){const e=`indexes/${this.uid}/settings/filterable-attributes`,s=await this.httpRequest.put(e,t);return new r(s)}async resetFilterableAttributes(){const t=`indexes/${this.uid}/settings/filterable-attributes`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getSortableAttributes(){const t=`indexes/${this.uid}/settings/sortable-attributes`;return await this.httpRequest.get(t)}async updateSortableAttributes(t){const e=`indexes/${this.uid}/settings/sortable-attributes`,s=await this.httpRequest.put(e,t);return new r(s)}async resetSortableAttributes(){const t=`indexes/${this.uid}/settings/sortable-attributes`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getSearchableAttributes(){const t=`indexes/${this.uid}/settings/searchable-attributes`;return await this.httpRequest.get(t)}async updateSearchableAttributes(t){const e=`indexes/${this.uid}/settings/searchable-attributes`,s=await this.httpRequest.put(e,t);return new r(s)}async resetSearchableAttributes(){const t=`indexes/${this.uid}/settings/searchable-attributes`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getDisplayedAttributes(){const t=`indexes/${this.uid}/settings/displayed-attributes`;return await this.httpRequest.get(t)}async updateDisplayedAttributes(t){const e=`indexes/${this.uid}/settings/displayed-attributes`,s=await this.httpRequest.put(e,t);return new r(s)}async resetDisplayedAttributes(){const t=`indexes/${this.uid}/settings/displayed-attributes`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getTypoTolerance(){const t=`indexes/${this.uid}/settings/typo-tolerance`;return await this.httpRequest.get(t)}async updateTypoTolerance(t){const e=`indexes/${this.uid}/settings/typo-tolerance`,s=await this.httpRequest.patch(e,t);return s.enqueuedAt=new Date(s.enqueuedAt),s}async resetTypoTolerance(){const t=`indexes/${this.uid}/settings/typo-tolerance`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getFaceting(){const t=`indexes/${this.uid}/settings/faceting`;return await this.httpRequest.get(t)}async updateFaceting(t){const e=`indexes/${this.uid}/settings/faceting`,s=await this.httpRequest.patch(e,t);return new r(s)}async resetFaceting(){const t=`indexes/${this.uid}/settings/faceting`,e=await this.httpRequest.delete(t);return new r(e)}async getSeparatorTokens(){const t=`indexes/${this.uid}/settings/separator-tokens`;return await this.httpRequest.get(t)}async updateSeparatorTokens(t){const e=`indexes/${this.uid}/settings/separator-tokens`,s=await this.httpRequest.put(e,t);return new r(s)}async resetSeparatorTokens(){const t=`indexes/${this.uid}/settings/separator-tokens`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getNonSeparatorTokens(){const t=`indexes/${this.uid}/settings/non-separator-tokens`;return await this.httpRequest.get(t)}async updateNonSeparatorTokens(t){const e=`indexes/${this.uid}/settings/non-separator-tokens`,s=await this.httpRequest.put(e,t);return new r(s)}async resetNonSeparatorTokens(){const t=`indexes/${this.uid}/settings/non-separator-tokens`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getDictionary(){const t=`indexes/${this.uid}/settings/dictionary`;return await this.httpRequest.get(t)}async updateDictionary(t){const e=`indexes/${this.uid}/settings/dictionary`,s=await this.httpRequest.put(e,t);return new r(s)}async resetDictionary(){const t=`indexes/${this.uid}/settings/dictionary`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getProximityPrecision(){const t=`indexes/${this.uid}/settings/proximity-precision`;return await this.httpRequest.get(t)}async updateProximityPrecision(t){const e=`indexes/${this.uid}/settings/proximity-precision`,s=await this.httpRequest.put(e,t);return new r(s)}async resetProximityPrecision(){const t=`indexes/${this.uid}/settings/proximity-precision`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getEmbedders(){const t=`indexes/${this.uid}/settings/embedders`;return await this.httpRequest.get(t)}async updateEmbedders(t){const e=`indexes/${this.uid}/settings/embedders`,s=await this.httpRequest.patch(e,t);return new r(s)}async resetEmbedders(){const t=`indexes/${this.uid}/settings/embedders`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getSearchCutoffMs(){const t=`indexes/${this.uid}/settings/search-cutoff-ms`;return await this.httpRequest.get(t)}async updateSearchCutoffMs(t){const e=`indexes/${this.uid}/settings/search-cutoff-ms`,s=await this.httpRequest.put(e,t);return new r(s)}async resetSearchCutoffMs(){const t=`indexes/${this.uid}/settings/search-cutoff-ms`,e=await this.httpRequest.delete(t);return new r(e)}async getLocalizedAttributes(){const t=`indexes/${this.uid}/settings/localized-attributes`;return await this.httpRequest.get(t)}async updateLocalizedAttributes(t){const e=`indexes/${this.uid}/settings/localized-attributes`,s=await this.httpRequest.put(e,t);return new r(s)}async resetLocalizedAttributes(){const t=`indexes/${this.uid}/settings/localized-attributes`,e=await this.httpRequest.delete(t);return new r(e)}async getFacetSearch(){const t=`indexes/${this.uid}/settings/facet-search`;return await this.httpRequest.get(t)}async updateFacetSearch(t){const e=`indexes/${this.uid}/settings/facet-search`,s=await this.httpRequest.put(e,t);return new r(s)}async resetFacetSearch(){const t=`indexes/${this.uid}/settings/facet-search`,e=await this.httpRequest.delete(t);return new r(e)}async getPrefixSearch(){const t=`indexes/${this.uid}/settings/prefix-search`;return await this.httpRequest.get(t)}async updatePrefixSearch(t){const e=`indexes/${this.uid}/settings/prefix-search`,s=await this.httpRequest.put(e,t);return new r(s)}async resetPrefixSearch(){const t=`indexes/${this.uid}/settings/prefix-search`,e=await this.httpRequest.delete(t);return new r(e)}}class j{config;httpRequest;tasks;batches;constructor(t){this.config=t,this.httpRequest=new w(t),this.tasks=new b(t),this.batches=new K(t)}index(t){return new o(this.config,t)}async getIndex(t){return new o(this.config,t).fetchInfo()}async getRawIndex(t){return new o(this.config,t).getRawInfo()}async getIndexes(t={}){const e=await this.getRawIndexes(t),s=e.results.map(n=>new o(this.config,n.uid,n.primaryKey));return{...e,results:s}}async getRawIndexes(t={}){return await this.httpRequest.get("indexes",t)}async createIndex(t,e={}){return await o.create(t,e,this.config)}async updateIndex(t,e={}){return await new o(this.config,t).update(e)}async deleteIndex(t){return await new o(this.config,t).delete()}async deleteIndexIfExists(t){try{return await this.deleteIndex(t),!0}catch(e){if(e.code===O.INDEX_NOT_FOUND)return!1;throw e}}async swapIndexes(t){return await this.httpRequest.post("/swap-indexes",t)}async multiSearch(t,e){return await this.httpRequest.post("multi-search",t,void 0,e)}async getTasks(t={}){return await this.tasks.getTasks(t)}async getTask(t){return await this.tasks.getTask(t)}async waitForTasks(t,{timeOutMs:e=5e3,intervalMs:s=50}={}){return await this.tasks.waitForTasks(t,{timeOutMs:e,intervalMs:s})}async waitForTask(t,{timeOutMs:e=5e3,intervalMs:s=50}={}){return await this.tasks.waitForTask(t,{timeOutMs:e,intervalMs:s})}async cancelTasks(t){return await this.tasks.cancelTasks(t)}async deleteTasks(t={}){return await this.tasks.deleteTasks(t)}async getBatches(t={}){return await this.batches.getBatches(t)}async getBatch(t){return await this.batches.getBatch(t)}async getKeys(t={}){const s=await this.httpRequest.get("keys",t);return s.results=s.results.map(n=>({...n,createdAt:new Date(n.createdAt),updatedAt:new Date(n.updatedAt)})),s}async getKey(t){const e=`keys/${t}`;return await this.httpRequest.get(e)}async createKey(t){return await this.httpRequest.post("keys",t)}async updateKey(t,e){const s=`keys/${t}`;return await this.httpRequest.patch(s,e)}async deleteKey(t){const e=`keys/${t}`;return await this.httpRequest.delete(e)}async health(){return await this.httpRequest.get("health")}async isHealthy(){try{return await this.httpRequest.get("health"),!0}catch{return!1}}async getStats(){return await this.httpRequest.get("stats")}async getVersion(){return await this.httpRequest.get("version")}async createDump(){const e=await this.httpRequest.post("dumps");return new r(e)}async createSnapshot(){const e=await this.httpRequest.post("snapshots");return new r(e)}}export{j as M};
