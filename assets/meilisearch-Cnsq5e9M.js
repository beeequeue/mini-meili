class _ extends Error{name="MeiliSearchError";constructor(...t){super(...t)}}class g extends _{name="MeiliSearchApiError";cause;response;constructor(t,e){super(e?.message??`${t.status}: ${t.statusText}`),this.response=t,e!==void 0&&(this.cause=e)}}class R extends _{name="MeiliSearchRequestError";constructor(t,e){super(`Request to ${t} has failed`,{cause:e})}}class m extends _{name="MeiliSearchTimeOutError";constructor(t){super(t)}}function T(a,t){return`${a}
Hint: It might not be working because maybe you're not up to date with the Meilisearch version that ${t} call requires.`}const f="0.48.2";function l(a){return Object.entries(a).reduce((t,e)=>{const[s,i]=e;return i!==void 0&&(t[s]=i),t},{})}async function k(a){return await new Promise(t=>setTimeout(t,a))}function x(a){return a.startsWith("https://")||a.startsWith("http://")?a:`http://${a}`}function L(a){return a.endsWith("/")||(a+="/"),a}function y(a){return Object.keys(a).reduce((s,i)=>{const n=a[i];return n===void 0?s:Array.isArray(n)?{...s,[i]:n.join(",")}:n instanceof Date?{...s,[i]:n.toISOString()}:{...s,[i]:n}},{})}function b(a){try{return a=x(a),a=L(a),a}catch{throw new _("The provided host is not valid.")}}function C(a){if(Array.isArray(a))return a.reduce((t,e)=>(t[e[0]]=e[1],t),{});if("has"in a){const t={};return a.forEach((e,s)=>t[s]=e),t}else return Object.assign({},a)}function O(a){const t="X-Meilisearch-Client",e=`Meilisearch JavaScript (v${f})`,s="Content-Type",i="Authorization",n=C(a.requestConfig?.headers??{});if(a.apiKey&&!n[i]&&(n[i]=`Bearer ${a.apiKey}`),n[s]||(n["Content-Type"]="application/json"),a.clientAgents&&Array.isArray(a.clientAgents)){const u=a.clientAgents.concat(e);n[t]=u.join(" ; ")}else{if(a.clientAgents&&!Array.isArray(a.clientAgents))throw new _(`Meilisearch: The header "${t}" should be an array of string(s).
`);n[t]=e}return n}class A{headers;url;requestConfig;httpClient;requestTimeout;constructor(t){this.headers=O(t),this.requestConfig=t.requestConfig,this.httpClient=t.httpClient,this.requestTimeout=t.timeout;try{const e=b(t.host);this.url=new URL(e)}catch{throw new _("The provided host is not valid.")}}async request({method:t,url:e,params:s,body:i,config:n={}}){const u=new URL(e,this.url);if(s){const h=new URLSearchParams;Object.keys(s).filter(p=>s[p]!==null).map(p=>h.set(p,s[p])),u.search=h.toString()}n.headers?.["Content-Type"]||(i=JSON.stringify(i));const o={...this.headers,...n.headers},c=await this.fetchWithTimeout(u.toString(),{...n,...this.requestConfig,method:t,body:i,headers:o},this.requestTimeout).catch(h=>{throw new R(u.toString(),h)});if(this.httpClient!==void 0)return c;const I=await c.text(),w=I===""?void 0:JSON.parse(I);if(!c.ok)throw new g(c,w);return w}async fetchWithTimeout(t,e,s){return new Promise((i,n)=>{const E=[(this.httpClient?this.httpClient:fetch)(t,e)];let c;if(s){const I=new Promise((w,h)=>{c=setTimeout(()=>{h(new Error("Error: Request Timed Out"))},s)});E.push(I)}Promise.race(E).then(i).catch(n).finally(()=>{clearTimeout(c)})})}async get(t,e,s){return await this.request({method:"GET",url:t,params:e,config:s})}async post(t,e,s,i){return await this.request({method:"POST",url:t,body:e,params:s,config:i})}async put(t,e,s,i){return await this.request({method:"PUT",url:t,body:e,params:s,config:i})}async patch(t,e,s,i){return await this.request({method:"PATCH",url:t,body:e,params:s,config:i})}async delete(t,e,s,i){return await this.request({method:"DELETE",url:t,body:e,params:s,config:i})}}class r{taskUid;indexUid;status;type;enqueuedAt;constructor(t){this.taskUid=t.taskUid,this.indexUid=t.indexUid,this.status=t.status,this.type=t.type,this.enqueuedAt=new Date(t.enqueuedAt)}}class S{indexUid;status;type;uid;batchUid;canceledBy;details;error;duration;startedAt;enqueuedAt;finishedAt;constructor(t){this.indexUid=t.indexUid,this.status=t.status,this.type=t.type,this.uid=t.uid,this.batchUid=t.batchUid,this.details=t.details,this.canceledBy=t.canceledBy,this.error=t.error,this.duration=t.duration,this.startedAt=new Date(t.startedAt),this.enqueuedAt=new Date(t.enqueuedAt),this.finishedAt=new Date(t.finishedAt)}}class q{httpRequest;constructor(t){this.httpRequest=new A(t)}async getTask(t){const e=`tasks/${t}`,s=await this.httpRequest.get(e);return new S(s)}async getTasks(t={}){const s=await this.httpRequest.get("tasks",y(t));return{...s,results:s.results.map(i=>new S(i))}}async waitForTask(t,{timeOutMs:e=5e3,intervalMs:s=50}={}){const i=Date.now();for(;Date.now()-i<e;){const n=await this.getTask(t);if(![N.TASK_ENQUEUED,N.TASK_PROCESSING].includes(n.status))return n;await k(s)}throw new m(`timeout of ${e}ms has exceeded on process ${t} when waiting a task to be resolved.`)}async waitForTasks(t,{timeOutMs:e=5e3,intervalMs:s=50}={}){const i=[];for(const n of t){const u=await this.waitForTask(n,{timeOutMs:e,intervalMs:s});i.push(u)}return i}async cancelTasks(t={}){const s=await this.httpRequest.post("tasks/cancel",{},y(t));return new r(s)}async deleteTasks(t={}){const s=await this.httpRequest.delete("tasks",{},y(t));return new r(s)}}class D{uid;details;stats;startedAt;finishedAt;duration;progress;constructor(t){this.uid=t.uid,this.details=t.details,this.stats=t.stats,this.startedAt=t.startedAt,this.finishedAt=t.finishedAt,this.duration=t.duration,this.progress=t.progress}}class ${httpRequest;constructor(t){this.httpRequest=new A(t)}async getBatch(t){const e=`batches/${t}`,s=await this.httpRequest.get(e);return new D(s)}async getBatches(t={}){const s=await this.httpRequest.get("batches",y(t));return{...s,results:s.results.map(i=>new D(i))}}}const N={TASK_SUCCEEDED:"succeeded",TASK_PROCESSING:"processing",TASK_FAILED:"failed",TASK_ENQUEUED:"enqueued",TASK_CANCELED:"canceled"},v={INDEX_CREATION_FAILED:"index_creation_failed",MISSING_INDEX_UID:"missing_index_uid",INDEX_ALREADY_EXISTS:"index_already_exists",INDEX_NOT_FOUND:"index_not_found",INVALID_INDEX_UID:"invalid_index_uid",INDEX_NOT_ACCESSIBLE:"index_not_accessible",INVALID_INDEX_OFFSET:"invalid_index_offset",INVALID_INDEX_LIMIT:"invalid_index_limit",INVALID_STATE:"invalid_state",PRIMARY_KEY_INFERENCE_FAILED:"primary_key_inference_failed",INDEX_PRIMARY_KEY_ALREADY_EXISTS:"index_primary_key_already_exists",INVALID_INDEX_PRIMARY_KEY:"invalid_index_primary_key",DOCUMENTS_FIELDS_LIMIT_REACHED:"document_fields_limit_reached",MISSING_DOCUMENT_ID:"missing_document_id",INVALID_DOCUMENT_ID:"invalid_document_id",INVALID_CONTENT_TYPE:"invalid_content_type",MISSING_CONTENT_TYPE:"missing_content_type",INVALID_DOCUMENT_FIELDS:"invalid_document_fields",INVALID_DOCUMENT_LIMIT:"invalid_document_limit",INVALID_DOCUMENT_OFFSET:"invalid_document_offset",INVALID_DOCUMENT_FILTER:"invalid_document_filter",MISSING_DOCUMENT_FILTER:"missing_document_filter",INVALID_DOCUMENT_VECTORS_FIELD:"invalid_document_vectors_field",PAYLOAD_TOO_LARGE:"payload_too_large",MISSING_PAYLOAD:"missing_payload",MALFORMED_PAYLOAD:"malformed_payload",NO_SPACE_LEFT_ON_DEVICE:"no_space_left_on_device",INVALID_STORE_FILE:"invalid_store_file",INVALID_RANKING_RULES:"missing_document_id",INVALID_REQUEST:"invalid_request",INVALID_DOCUMENT_GEO_FIELD:"invalid_document_geo_field",INVALID_SEARCH_Q:"invalid_search_q",INVALID_SEARCH_OFFSET:"invalid_search_offset",INVALID_SEARCH_LIMIT:"invalid_search_limit",INVALID_SEARCH_PAGE:"invalid_search_page",INVALID_SEARCH_HITS_PER_PAGE:"invalid_search_hits_per_page",INVALID_SEARCH_ATTRIBUTES_TO_RETRIEVE:"invalid_search_attributes_to_retrieve",INVALID_SEARCH_ATTRIBUTES_TO_CROP:"invalid_search_attributes_to_crop",INVALID_SEARCH_CROP_LENGTH:"invalid_search_crop_length",INVALID_SEARCH_ATTRIBUTES_TO_HIGHLIGHT:"invalid_search_attributes_to_highlight",INVALID_SEARCH_SHOW_MATCHES_POSITION:"invalid_search_show_matches_position",INVALID_SEARCH_FILTER:"invalid_search_filter",INVALID_SEARCH_SORT:"invalid_search_sort",INVALID_SEARCH_FACETS:"invalid_search_facets",INVALID_SEARCH_HIGHLIGHT_PRE_TAG:"invalid_search_highlight_pre_tag",INVALID_SEARCH_HIGHLIGHT_POST_TAG:"invalid_search_highlight_post_tag",INVALID_SEARCH_CROP_MARKER:"invalid_search_crop_marker",INVALID_SEARCH_MATCHING_STRATEGY:"invalid_search_matching_strategy",INVALID_SEARCH_VECTOR:"invalid_search_vector",INVALID_SEARCH_ATTRIBUTES_TO_SEARCH_ON:"invalid_search_attributes_to_search_on",BAD_REQUEST:"bad_request",DOCUMENT_NOT_FOUND:"document_not_found",INTERNAL:"internal",INVALID_API_KEY:"invalid_api_key",INVALID_API_KEY_DESCRIPTION:"invalid_api_key_description",INVALID_API_KEY_ACTIONS:"invalid_api_key_actions",INVALID_API_KEY_INDEXES:"invalid_api_key_indexes",INVALID_API_KEY_EXPIRES_AT:"invalid_api_key_expires_at",API_KEY_NOT_FOUND:"api_key_not_found",IMMUTABLE_API_KEY_UID:"immutable_api_key_uid",IMMUTABLE_API_KEY_ACTIONS:"immutable_api_key_actions",IMMUTABLE_API_KEY_INDEXES:"immutable_api_key_indexes",IMMUTABLE_API_KEY_EXPIRES_AT:"immutable_api_key_expires_at",IMMUTABLE_API_KEY_CREATED_AT:"immutable_api_key_created_at",IMMUTABLE_API_KEY_UPDATED_AT:"immutable_api_key_updated_at",MISSING_AUTHORIZATION_HEADER:"missing_authorization_header",UNRETRIEVABLE_DOCUMENT:"unretrievable_document",MAX_DATABASE_SIZE_LIMIT_REACHED:"database_size_limit_reached",TASK_NOT_FOUND:"task_not_found",DUMP_PROCESS_FAILED:"dump_process_failed",DUMP_NOT_FOUND:"dump_not_found",INVALID_SWAP_DUPLICATE_INDEX_FOUND:"invalid_swap_duplicate_index_found",INVALID_SWAP_INDEXES:"invalid_swap_indexes",MISSING_SWAP_INDEXES:"missing_swap_indexes",MISSING_MASTER_KEY:"missing_master_key",INVALID_TASK_TYPES:"invalid_task_types",INVALID_TASK_UIDS:"invalid_task_uids",INVALID_TASK_STATUSES:"invalid_task_statuses",INVALID_TASK_LIMIT:"invalid_task_limit",INVALID_TASK_FROM:"invalid_task_from",INVALID_TASK_CANCELED_BY:"invalid_task_canceled_by",MISSING_TASK_FILTERS:"missing_task_filters",TOO_MANY_OPEN_FILES:"too_many_open_files",IO_ERROR:"io_error",INVALID_TASK_INDEX_UIDS:"invalid_task_index_uids",IMMUTABLE_INDEX_UID:"immutable_index_uid",IMMUTABLE_INDEX_CREATED_AT:"immutable_index_created_at",IMMUTABLE_INDEX_UPDATED_AT:"immutable_index_updated_at",INVALID_SETTINGS_DISPLAYED_ATTRIBUTES:"invalid_settings_displayed_attributes",INVALID_SETTINGS_SEARCHABLE_ATTRIBUTES:"invalid_settings_searchable_attributes",INVALID_SETTINGS_FILTERABLE_ATTRIBUTES:"invalid_settings_filterable_attributes",INVALID_SETTINGS_SORTABLE_ATTRIBUTES:"invalid_settings_sortable_attributes",INVALID_SETTINGS_RANKING_RULES:"invalid_settings_ranking_rules",INVALID_SETTINGS_STOP_WORDS:"invalid_settings_stop_words",INVALID_SETTINGS_SYNONYMS:"invalid_settings_synonyms",INVALID_SETTINGS_DISTINCT_ATTRIBUTE:"invalid_settings_distinct_attribute",INVALID_SETTINGS_TYPO_TOLERANCE:"invalid_settings_typo_tolerance",INVALID_SETTINGS_FACETING:"invalid_settings_faceting",INVALID_SETTINGS_PAGINATION:"invalid_settings_pagination",INVALID_SETTINGS_SEARCH_CUTOFF_MS:"invalid_settings_search_cutoff_ms",INVALID_SETTINGS_LOCALIZED_ATTRIBUTES:"invalid_settings_localized_attributes",INVALID_TASK_BEFORE_ENQUEUED_AT:"invalid_task_before_enqueued_at",INVALID_TASK_AFTER_ENQUEUED_AT:"invalid_task_after_enqueued_at",INVALID_TASK_BEFORE_STARTED_AT:"invalid_task_before_started_at",INVALID_TASK_AFTER_STARTED_AT:"invalid_task_after_started_at",INVALID_TASK_BEFORE_FINISHED_AT:"invalid_task_before_finished_at",INVALID_TASK_AFTER_FINISHED_AT:"invalid_task_after_finished_at",MISSING_API_KEY_ACTIONS:"missing_api_key_actions",MISSING_API_KEY_INDEXES:"missing_api_key_indexes",MISSING_API_KEY_EXPIRES_AT:"missing_api_key_expires_at",INVALID_API_KEY_LIMIT:"invalid_api_key_limit",INVALID_API_KEY_OFFSET:"invalid_api_key_offset",INVALID_FACET_SEARCH_FACET_NAME:"invalid_facet_search_facet_name",MISSING_FACET_SEARCH_FACET_NAME:"missing_facet_search_facet_name",INVALID_FACET_SEARCH_FACET_QUERY:"invalid_facet_search_facet_query",INVALID_SEARCH_RANKING_SCORE_THRESHOLD:"invalid_search_ranking_score_threshold",INVALID_SIMILAR_RANKING_SCORE_THRESHOLD:"invalid_similar_ranking_score_threshold"};class d{uid;primaryKey;createdAt;updatedAt;httpRequest;tasks;constructor(t,e,s){this.uid=e,this.primaryKey=s,this.httpRequest=new A(t),this.tasks=new q(t)}async search(t,e,s){const i=`indexes/${this.uid}/search`;return await this.httpRequest.post(i,l({q:t,...e}),void 0,s)}async searchGet(t,e,s){const i=`indexes/${this.uid}/search`,u={q:t,...e,filter:(o=>{if(typeof o=="string")return o;if(Array.isArray(o))throw new _("The filter query parameter should be in string format when using searchGet")})(e?.filter),sort:e?.sort?.join(","),facets:e?.facets?.join(","),attributesToRetrieve:e?.attributesToRetrieve?.join(","),attributesToCrop:e?.attributesToCrop?.join(","),attributesToHighlight:e?.attributesToHighlight?.join(","),vector:e?.vector?.join(","),attributesToSearchOn:e?.attributesToSearchOn?.join(",")};return await this.httpRequest.get(i,l(u),s)}async searchForFacetValues(t,e){const s=`indexes/${this.uid}/facet-search`;return await this.httpRequest.post(s,l(t),void 0,e)}async searchSimilarDocuments(t){const e=`indexes/${this.uid}/similar`;return await this.httpRequest.post(e,l(t),void 0)}async getRawInfo(){const t=`indexes/${this.uid}`,e=await this.httpRequest.get(t);return this.primaryKey=e.primaryKey,this.updatedAt=new Date(e.updatedAt),this.createdAt=new Date(e.createdAt),e}async fetchInfo(){return await this.getRawInfo(),this}async fetchPrimaryKey(){return this.primaryKey=(await this.getRawInfo()).primaryKey,this.primaryKey}static async create(t,e={},s){const u=await new A(s).post("indexes",{...e,uid:t});return new r(u)}async update(t){const e=`indexes/${this.uid}`,s=await this.httpRequest.patch(e,t);return s.enqueuedAt=new Date(s.enqueuedAt),s}async delete(){const t=`indexes/${this.uid}`,e=await this.httpRequest.delete(t);return new r(e)}async getTasks(t={}){return await this.tasks.getTasks({...t,indexUids:[this.uid]})}async getTask(t){return await this.tasks.getTask(t)}async waitForTasks(t,{timeOutMs:e=5e3,intervalMs:s=50}={}){return await this.tasks.waitForTasks(t,{timeOutMs:e,intervalMs:s})}async waitForTask(t,{timeOutMs:e=5e3,intervalMs:s=50}={}){return await this.tasks.waitForTask(t,{timeOutMs:e,intervalMs:s})}async getStats(){const t=`indexes/${this.uid}/stats`;return await this.httpRequest.get(t)}async getDocuments(t={}){if(t=l(t),t.filter!==void 0)try{const e=`indexes/${this.uid}/documents/fetch`;return await this.httpRequest.post(e,t)}catch(e){throw(e instanceof R||e instanceof g)&&(e.message=T(e.message,"getDocuments")),e}else{const e=`indexes/${this.uid}/documents`,s=Array.isArray(t?.fields)?{fields:t?.fields?.join(",")}:{};return await this.httpRequest.get(e,{...t,...s})}}async getDocument(t,e){const s=`indexes/${this.uid}/documents/${t}`,i=(()=>{if(Array.isArray(e?.fields))return e?.fields?.join(",")})();return await this.httpRequest.get(s,l({...e,fields:i}))}async addDocuments(t,e){const s=`indexes/${this.uid}/documents`,i=await this.httpRequest.post(s,t,e);return new r(i)}async addDocumentsFromString(t,e,s){const i=`indexes/${this.uid}/documents`,n=await this.httpRequest.post(i,t,s,{headers:{"Content-Type":e}});return new r(n)}async addDocumentsInBatches(t,e=1e3,s){const i=[];for(let n=0;n<t.length;n+=e)i.push(await this.addDocuments(t.slice(n,n+e),s));return i}async updateDocuments(t,e){const s=`indexes/${this.uid}/documents`,i=await this.httpRequest.put(s,t,e);return new r(i)}async updateDocumentsInBatches(t,e=1e3,s){const i=[];for(let n=0;n<t.length;n+=e)i.push(await this.updateDocuments(t.slice(n,n+e),s));return i}async updateDocumentsFromString(t,e,s){const i=`indexes/${this.uid}/documents`,n=await this.httpRequest.put(i,t,s,{headers:{"Content-Type":e}});return new r(n)}async deleteDocument(t){const e=`indexes/${this.uid}/documents/${t}`,s=await this.httpRequest.delete(e);return s.enqueuedAt=new Date(s.enqueuedAt),s}async deleteDocuments(t){const e=!Array.isArray(t)&&typeof t=="object",s=e?"documents/delete":"documents/delete-batch",i=`indexes/${this.uid}/${s}`;try{const n=await this.httpRequest.post(i,t);return new r(n)}catch(n){throw(n instanceof R&&e||n instanceof g)&&(n.message=T(n.message,"deleteDocuments")),n}}async deleteAllDocuments(){const t=`indexes/${this.uid}/documents`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async updateDocumentsByFunction(t){const e=`indexes/${this.uid}/documents/edit`,s=await this.httpRequest.post(e,t);return new r(s)}async getSettings(){const t=`indexes/${this.uid}/settings`;return await this.httpRequest.get(t)}async updateSettings(t){const e=`indexes/${this.uid}/settings`,s=await this.httpRequest.patch(e,t);return s.enqueued=new Date(s.enqueuedAt),s}async resetSettings(){const t=`indexes/${this.uid}/settings`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getPagination(){const t=`indexes/${this.uid}/settings/pagination`;return await this.httpRequest.get(t)}async updatePagination(t){const e=`indexes/${this.uid}/settings/pagination`,s=await this.httpRequest.patch(e,t);return new r(s)}async resetPagination(){const t=`indexes/${this.uid}/settings/pagination`,e=await this.httpRequest.delete(t);return new r(e)}async getSynonyms(){const t=`indexes/${this.uid}/settings/synonyms`;return await this.httpRequest.get(t)}async updateSynonyms(t){const e=`indexes/${this.uid}/settings/synonyms`,s=await this.httpRequest.put(e,t);return new r(s)}async resetSynonyms(){const t=`indexes/${this.uid}/settings/synonyms`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getStopWords(){const t=`indexes/${this.uid}/settings/stop-words`;return await this.httpRequest.get(t)}async updateStopWords(t){const e=`indexes/${this.uid}/settings/stop-words`,s=await this.httpRequest.put(e,t);return new r(s)}async resetStopWords(){const t=`indexes/${this.uid}/settings/stop-words`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getRankingRules(){const t=`indexes/${this.uid}/settings/ranking-rules`;return await this.httpRequest.get(t)}async updateRankingRules(t){const e=`indexes/${this.uid}/settings/ranking-rules`,s=await this.httpRequest.put(e,t);return new r(s)}async resetRankingRules(){const t=`indexes/${this.uid}/settings/ranking-rules`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getDistinctAttribute(){const t=`indexes/${this.uid}/settings/distinct-attribute`;return await this.httpRequest.get(t)}async updateDistinctAttribute(t){const e=`indexes/${this.uid}/settings/distinct-attribute`,s=await this.httpRequest.put(e,t);return new r(s)}async resetDistinctAttribute(){const t=`indexes/${this.uid}/settings/distinct-attribute`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getFilterableAttributes(){const t=`indexes/${this.uid}/settings/filterable-attributes`;return await this.httpRequest.get(t)}async updateFilterableAttributes(t){const e=`indexes/${this.uid}/settings/filterable-attributes`,s=await this.httpRequest.put(e,t);return new r(s)}async resetFilterableAttributes(){const t=`indexes/${this.uid}/settings/filterable-attributes`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getSortableAttributes(){const t=`indexes/${this.uid}/settings/sortable-attributes`;return await this.httpRequest.get(t)}async updateSortableAttributes(t){const e=`indexes/${this.uid}/settings/sortable-attributes`,s=await this.httpRequest.put(e,t);return new r(s)}async resetSortableAttributes(){const t=`indexes/${this.uid}/settings/sortable-attributes`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getSearchableAttributes(){const t=`indexes/${this.uid}/settings/searchable-attributes`;return await this.httpRequest.get(t)}async updateSearchableAttributes(t){const e=`indexes/${this.uid}/settings/searchable-attributes`,s=await this.httpRequest.put(e,t);return new r(s)}async resetSearchableAttributes(){const t=`indexes/${this.uid}/settings/searchable-attributes`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getDisplayedAttributes(){const t=`indexes/${this.uid}/settings/displayed-attributes`;return await this.httpRequest.get(t)}async updateDisplayedAttributes(t){const e=`indexes/${this.uid}/settings/displayed-attributes`,s=await this.httpRequest.put(e,t);return new r(s)}async resetDisplayedAttributes(){const t=`indexes/${this.uid}/settings/displayed-attributes`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getTypoTolerance(){const t=`indexes/${this.uid}/settings/typo-tolerance`;return await this.httpRequest.get(t)}async updateTypoTolerance(t){const e=`indexes/${this.uid}/settings/typo-tolerance`,s=await this.httpRequest.patch(e,t);return s.enqueuedAt=new Date(s.enqueuedAt),s}async resetTypoTolerance(){const t=`indexes/${this.uid}/settings/typo-tolerance`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getFaceting(){const t=`indexes/${this.uid}/settings/faceting`;return await this.httpRequest.get(t)}async updateFaceting(t){const e=`indexes/${this.uid}/settings/faceting`,s=await this.httpRequest.patch(e,t);return new r(s)}async resetFaceting(){const t=`indexes/${this.uid}/settings/faceting`,e=await this.httpRequest.delete(t);return new r(e)}async getSeparatorTokens(){const t=`indexes/${this.uid}/settings/separator-tokens`;return await this.httpRequest.get(t)}async updateSeparatorTokens(t){const e=`indexes/${this.uid}/settings/separator-tokens`,s=await this.httpRequest.put(e,t);return new r(s)}async resetSeparatorTokens(){const t=`indexes/${this.uid}/settings/separator-tokens`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getNonSeparatorTokens(){const t=`indexes/${this.uid}/settings/non-separator-tokens`;return await this.httpRequest.get(t)}async updateNonSeparatorTokens(t){const e=`indexes/${this.uid}/settings/non-separator-tokens`,s=await this.httpRequest.put(e,t);return new r(s)}async resetNonSeparatorTokens(){const t=`indexes/${this.uid}/settings/non-separator-tokens`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getDictionary(){const t=`indexes/${this.uid}/settings/dictionary`;return await this.httpRequest.get(t)}async updateDictionary(t){const e=`indexes/${this.uid}/settings/dictionary`,s=await this.httpRequest.put(e,t);return new r(s)}async resetDictionary(){const t=`indexes/${this.uid}/settings/dictionary`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getProximityPrecision(){const t=`indexes/${this.uid}/settings/proximity-precision`;return await this.httpRequest.get(t)}async updateProximityPrecision(t){const e=`indexes/${this.uid}/settings/proximity-precision`,s=await this.httpRequest.put(e,t);return new r(s)}async resetProximityPrecision(){const t=`indexes/${this.uid}/settings/proximity-precision`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getEmbedders(){const t=`indexes/${this.uid}/settings/embedders`;return await this.httpRequest.get(t)}async updateEmbedders(t){const e=`indexes/${this.uid}/settings/embedders`,s=await this.httpRequest.patch(e,t);return new r(s)}async resetEmbedders(){const t=`indexes/${this.uid}/settings/embedders`,e=await this.httpRequest.delete(t);return e.enqueuedAt=new Date(e.enqueuedAt),e}async getSearchCutoffMs(){const t=`indexes/${this.uid}/settings/search-cutoff-ms`;return await this.httpRequest.get(t)}async updateSearchCutoffMs(t){const e=`indexes/${this.uid}/settings/search-cutoff-ms`,s=await this.httpRequest.put(e,t);return new r(s)}async resetSearchCutoffMs(){const t=`indexes/${this.uid}/settings/search-cutoff-ms`,e=await this.httpRequest.delete(t);return new r(e)}async getLocalizedAttributes(){const t=`indexes/${this.uid}/settings/localized-attributes`;return await this.httpRequest.get(t)}async updateLocalizedAttributes(t){const e=`indexes/${this.uid}/settings/localized-attributes`,s=await this.httpRequest.put(e,t);return new r(s)}async resetLocalizedAttributes(){const t=`indexes/${this.uid}/settings/localized-attributes`,e=await this.httpRequest.delete(t);return new r(e)}async getFacetSearch(){const t=`indexes/${this.uid}/settings/facet-search`;return await this.httpRequest.get(t)}async updateFacetSearch(t){const e=`indexes/${this.uid}/settings/facet-search`,s=await this.httpRequest.put(e,t);return new r(s)}async resetFacetSearch(){const t=`indexes/${this.uid}/settings/facet-search`,e=await this.httpRequest.delete(t);return new r(e)}async getPrefixSearch(){const t=`indexes/${this.uid}/settings/prefix-search`;return await this.httpRequest.get(t)}async updatePrefixSearch(t){const e=`indexes/${this.uid}/settings/prefix-search`,s=await this.httpRequest.put(e,t);return new r(s)}async resetPrefixSearch(){const t=`indexes/${this.uid}/settings/prefix-search`,e=await this.httpRequest.delete(t);return new r(e)}}class P{config;httpRequest;tasks;batches;constructor(t){this.config=t,this.httpRequest=new A(t),this.tasks=new q(t),this.batches=new $(t)}index(t){return new d(this.config,t)}async getIndex(t){return new d(this.config,t).fetchInfo()}async getRawIndex(t){return new d(this.config,t).getRawInfo()}async getIndexes(t={}){const e=await this.getRawIndexes(t),s=e.results.map(i=>new d(this.config,i.uid,i.primaryKey));return{...e,results:s}}async getRawIndexes(t={}){return await this.httpRequest.get("indexes",t)}async createIndex(t,e={}){return await d.create(t,e,this.config)}async updateIndex(t,e={}){return await new d(this.config,t).update(e)}async deleteIndex(t){return await new d(this.config,t).delete()}async deleteIndexIfExists(t){try{return await this.deleteIndex(t),!0}catch(e){if(e.code===v.INDEX_NOT_FOUND)return!1;throw e}}async swapIndexes(t){return await this.httpRequest.post("/swap-indexes",t)}async multiSearch(t,e){return await this.httpRequest.post("multi-search",t,void 0,e)}async getTasks(t={}){return await this.tasks.getTasks(t)}async getTask(t){return await this.tasks.getTask(t)}async waitForTasks(t,{timeOutMs:e=5e3,intervalMs:s=50}={}){return await this.tasks.waitForTasks(t,{timeOutMs:e,intervalMs:s})}async waitForTask(t,{timeOutMs:e=5e3,intervalMs:s=50}={}){return await this.tasks.waitForTask(t,{timeOutMs:e,intervalMs:s})}async cancelTasks(t){return await this.tasks.cancelTasks(t)}async deleteTasks(t={}){return await this.tasks.deleteTasks(t)}async getBatches(t={}){return await this.batches.getBatches(t)}async getBatch(t){return await this.batches.getBatch(t)}async getKeys(t={}){const s=await this.httpRequest.get("keys",t);return s.results=s.results.map(i=>({...i,createdAt:new Date(i.createdAt),updatedAt:new Date(i.updatedAt)})),s}async getKey(t){const e=`keys/${t}`;return await this.httpRequest.get(e)}async createKey(t){return await this.httpRequest.post("keys",t)}async updateKey(t,e){const s=`keys/${t}`;return await this.httpRequest.patch(s,e)}async deleteKey(t){const e=`keys/${t}`;return await this.httpRequest.delete(e)}async health(){return await this.httpRequest.get("health")}async isHealthy(){try{return await this.httpRequest.get("health"),!0}catch{return!1}}async getStats(){return await this.httpRequest.get("stats")}async getVersion(){return await this.httpRequest.get("version")}async createDump(){const e=await this.httpRequest.post("dumps");return new r(e)}async createSnapshot(){const e=await this.httpRequest.post("snapshots");return new r(e)}}export{P as M};
